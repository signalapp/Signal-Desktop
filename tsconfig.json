{
  "include": ["ts/**/*", "app/**/*", "package.json", "build/intl-linter/**/*"],
  "compilerOptions": {
    /*
     * Visit https://aka.ms/tsconfig to read more about this file
     */

    /**
     * Projects
     */

    /* Save .tsbuildinfo files to allow for incremental compilation of projects. */
    "incremental": true,
    /* Enable constraints that allow a TypeScript project to be used with project references. */
    "composite": false,
    /* Specify the path to .tsbuildinfo incremental compilation file. */
    // "tsBuildInfoFile": "./.tsbuildinfo",
    /* Disable preferring source files instead of declaration files when referencing composite projects. */
    // "disableSourceOfProjectReferenceRedirect": true,
    /* Opt a project out of multi-project reference checking when editing. */
    // "disableSolutionSearching": true,
    /* Reduce the number of projects loaded automatically by TypeScript. */
    // "disableReferencedProjectLoad": true,

    /**
     * Language and Environment
     */

    /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */
    "target": "ES2023",
    /* Specify a set of bundled library declaration files that describe the target runtime environment. */
    "lib": [
      "DOM", // Required to access `window`
      "DOM.Iterable",
      "ESNext"
    ],
    /* Specify what JSX code is generated. */
    "jsx": "react",
    /* Enable experimental support for legacy experimental decorators. */
    // "experimentalDecorators": true,
    /* Emit design-type metadata for decorated declarations in source files. */
    // "emitDecoratorMetadata": true,
    /* Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h'. */
    // "jsxFactory": "",
    /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'. */
    // "jsxFragmentFactory": "",
    /* Specify module specifier used to import the JSX factory functions when using 'jsx: react-jsx*'. */
    // "jsxImportSource": "",
    /* Specify the object invoked for 'createElement'. This only applies when targeting 'react' JSX emit. */
    // "reactNamespace": "",
    /* Disable including any library files, including the default lib.d.ts. */
    // "noLib": true,
    /* Emit ECMAScript-standard-compliant class fields. */
    "useDefineForClassFields": true,
    /* Control what method is used to detect module-format JS files. */
    // "moduleDetection": "auto",

    /**
     * Modules
     */

    /* Specify what module code is generated. */
    "module": "ES2022",
    /* Specify the root folder within your source files. */
    "rootDir": "./",
    /* Specify how TypeScript looks up a file from a given module specifier. */
    "moduleResolution": "Node",
    /* Specify the base directory to resolve non-relative module names. */
    // "baseUrl": "./",
    /* Specify a set of entries that re-map imports to additional lookup locations. */
    // "paths": {},
    /* Allow multiple folders to be treated as one when resolving modules. */
    // "rootDirs": [],
    /* Specify multiple folders that act like './node_modules/@types'. */
    // "typeRoots": [],
    /* Specify type package names to be included without being referenced in a source file. */
    // "types": [],
    /* Allow accessing UMD globals from modules. */
    // "allowUmdGlobalAccess": true,
    /* List of file name suffixes to search when resolving a module. */
    // "moduleSuffixes": [],
    /* Allow imports to include TypeScript file extensions. Requires '--moduleResolution bundler' and either '--noEmit' or '--emitDeclarationOnly' to be set. */
    // "allowImportingTsExtensions": true,
    /* Use the package.json 'exports' field when resolving package imports. */
    // "resolvePackageJsonExports": true,
    /* Use the package.json 'imports' field when resolving imports. */
    // "resolvePackageJsonImports": true,
    /* Conditions to set in addition to the resolver-specific defaults when resolving imports. */
    // "customConditions": [],
    /* Check side effect imports. */
    "noUncheckedSideEffectImports": true,
    /* Enable importing .json files. */
    "resolveJsonModule": true,
    /* Enable importing files with any extension, provided a declaration file is present. */
    // "allowArbitraryExtensions": true,
    /* Disallow 'import's, 'require's or '<reference>'s from expanding the number of files TypeScript should add to a project. */
    // "noResolve": true,

    /**
     * JavaScript Support
     */

    /* Allow JavaScript files to be a part of your program. Use the 'checkJS' option to get errors from these files. */
    // "allowJs": true,
    /* Enable error reporting in type-checked JavaScript files. */
    // "checkJs": true,
    /* Specify the maximum folder depth used for checking JavaScript files from 'node_modules'. Only applicable with 'allowJs'. */
    // "maxNodeModuleJsDepth": 1,

    /**
     * Emit
     */

    /* Generate .d.ts files from TypeScript and JavaScript files in your project. */
    "declaration": false,
    /* Create sourcemaps for d.ts files. */
    // "declarationMap": true,
    /* Only output d.ts files and not JavaScript files. */
    // "emitDeclarationOnly": true,
    /* Create source map files for emitted JavaScript files. */
    // "sourceMap": true,
    /* Include sourcemap files inside the emitted JavaScript. */
    // "inlineSourceMap": true,
    /* Disable emitting files from a compilation. */
    "noEmit": true,
    /* Specify a file that bundles all outputs into one JavaScript file. If 'declaration' is true, also designates a file that bundles all .d.ts output. */
    // "outFile": "./",
    /* Specify an output folder for all emitted files. */
    // "outDir": "./",
    /* Disable emitting comments. */
    // "removeComments": true,
    /* Allow importing helper functions from tslib once per project, instead of including them per-file. */
    // "importHelpers": true,
    /* Emit more compliant, but verbose and less performant JavaScript for iteration. */
    // "downlevelIteration": true,
    /* Specify the root path for debuggers to find the reference source code. */
    // "sourceRoot": "",
    /* Specify the location where debugger should locate map files instead of generated locations. */
    // "mapRoot": "",
    /* Include source code in the sourcemaps inside the emitted JavaScript. */
    // "inlineSources": true,
    /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */
    // "emitBOM": true,
    /* Set the newline character for emitting files. */
    // "newLine": "crlf",
    /* Disable emitting declarations that have '@internal' in their JSDoc comments. */
    // "stripInternal": true,
    /* Disable generating custom helper functions like '__extends' in compiled output. */
    // "noEmitHelpers": true,
    /* Disable emitting files if any type checking errors are reported. */
    // "noEmitOnError": true,
    /* Disable erasing 'const enum' declarations in generated code. */
    // "preserveConstEnums": true,
    /* Specify the output directory for generated declaration files. */
    // "declarationDir": "./",

    /**
     * Interop Constraints
     */

    /* Ensure that each file can be safely transpiled without relying on other imports. */
    "isolatedModules": true,
    /* Do not transform or elide any imports or exports not marked as type-only, ensuring they are written in the output file's format based on the 'module' setting. */
    // "verbatimModuleSyntax": true,
    /* Require sufficient annotation on exports so other tools can trivially generate declaration files. */
    "isolatedDeclarations": false, // Incompatible with reselect
    /* Allow 'import x from y' when a module doesn't have a default export. */
    // "allowSyntheticDefaultImports": true,
    /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */
    "esModuleInterop": true,
    /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */
    // "preserveSymlinks": true,
    /* Ensure that casing is correct in imports. */
    "forceConsistentCasingInFileNames": true,

    /**
     * Type Checking
     */

    /* Enable all strict type-checking options. */
    "strict": true,
    /* Enable error reporting for expressions and declarations with an implied 'any' type. */
    "noImplicitAny": true, // (default: strict)
    /* When type checking, take into account 'null' and 'undefined'. */
    "strictNullChecks": true, // (default: strict)
    /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */
    "strictFunctionTypes": true, // (default: strict)
    /* Check that the arguments for 'bind', 'call', and 'apply' methods match the original function. */
    "strictBindCallApply": true, // (default: strict)
    /* Check for class properties that are declared but not set in the constructor. */
    "strictPropertyInitialization": true, // (default: strict)
    /* Built-in iterators are instantiated with a 'TReturn' type of 'undefined' instead of 'any'. */
    "strictBuiltinIteratorReturn": true,
    /* Enable error reporting when 'this' is given the type 'any'. */
    "noImplicitThis": true, // (default: strict)
    /* Default catch clause variables as 'unknown' instead of 'any'. */
    "useUnknownInCatchVariables": false, // TODO: Migration needed
    /* Ensure 'use strict' is always emitted. */
    "alwaysStrict": true, // (default: strict)
    /* Enable error reporting when local variables aren't read. */
    "noUnusedLocals": true,
    /* Raise an error when a function parameter isn't read. */
    "noUnusedParameters": true,
    /* Interpret optional property types as written, rather than adding 'undefined'. */
    "exactOptionalPropertyTypes": false, // TODO: Major migration needed
    /* Enable error reporting for codepaths that do not explicitly return in a function. */
    "noImplicitReturns": true,
    /* Enable error reporting for fallthrough cases in switch statements. */
    "noFallthroughCasesInSwitch": true,
    /* Add 'undefined' to a type when accessed using an index. */
    "noUncheckedIndexedAccess": false, // TODO: Major migration needed
    /* Ensure overriding members in derived classes are marked with an override modifier. */
    "noImplicitOverride": true,
    /* Enforces using indexed accessors for keys declared using an indexed type. */
    "noPropertyAccessFromIndexSignature": false, // TODO: Migration needed
    /* Disable error reporting for unused labels. */
    "allowUnusedLabels": false,
    /* Disable error reporting for unreachable code. */
    "allowUnreachableCode": true, // TODO: Turn off when `assertDev` is removed

    /**
     * Completeness
     */

    /* Skip type checking .d.ts files that are included with TypeScript. */
    // "skipDefaultLibCheck": true,
    /* Skip type checking all .d.ts files. */
    "skipLibCheck": true
  },

  /**
   * ts-node
   */
  "ts-node": {
    // Override TypeScript options for `ts-node` only
    "compilerOptions": {
      // Necessary for `ts-node` to work with CommonJS modules until we migrate to package.json#type: "module"
      "module": "CommonJS"
    }
  }
}
